# -*- coding: utf-8 -*-
"""Spam Detector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12R2h--E0zilXIeMNeRKeXUb9yxzxcMkb
"""

!pip install streamlit

import streamlit as st
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score
import pickle
import os
import pandas as pd

# File paths for saved model and vectorizer
MODEL_PATH = 'spam.pkl'
VECTORIZER_PATH = 'vectorizer.pkl'

def train_model():
    # Load your dataset (replace 'spam.csv' with your dataset file)
    st.write("Training the model...")
    data = pd.read_csv('spam.csv', encoding='latin-1')
    data = data[['v1', 'v2']]  # Keep only the necessary columns
    data.columns = ['label', 'text']
    data['label'] = data['label'].map({'ham': 0, 'spam': 1})  # Map labels to numeric values

    # Feature extraction
    cv = CountVectorizer()
    X = cv.fit_transform(data['text'])
    y = data['label']

    # Split data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train model
    model = MultinomialNB()
    model.fit(X_train, y_train)

    # Test model
    predictions = model.predict(X_test)
    accuracy = accuracy_score(y_test, predictions)
    st.write(f"Training completed. Model accuracy: {accuracy:.2f}")

    # Save model and vectorizer
    with open(MODEL_PATH, 'wb') as model_file:
        pickle.dump(model, model_file)
    with open(VECTORIZER_PATH, 'wb') as vectorizer_file:
        pickle.dump(cv, vectorizer_file)

    st.success("Model and vectorizer saved successfully.")

def load_model_and_vectorizer():
    if not os.path.exists(MODEL_PATH) or not os.path.exists(VECTORIZER_PATH):
        st.warning("Model or vectorizer not found. Please train the model first.")
        return None, None
    with open(MODEL_PATH, 'rb') as model_file:
        model = pickle.load(model_file)
    with open(VECTORIZER_PATH, 'rb') as vectorizer_file:
        cv = pickle.load(vectorizer_file)
    return model, cv

def classify_email():
    st.title("Email Spam Classification Application")
    st.write("This is a Machine Learning application to classify emails as spam or ham.")
    st.subheader("Classification")

    model, cv = load_model_and_vectorizer()
    if not model or not cv:
        return

    user_input = st.text_area("Enter an email to classify", height=150)
    if st.button("Classify"):
        if user_input:
            data = [user_input]
            vec = cv.transform(data).toarray()
            result = model.predict(vec)
            if result[0] == 0:
                st.success("This is Not A Spam Email")
            else:
                st.error("This is A Spam Email")
        else:
            st.write("Please enter an email to classify.")

st.sidebar.title("Spam Detection App")
app_mode = st.sidebar.radio("Choose Mode", ["Train Model", "Classify Email"])

if app_mode == "Train Model":
    train_model()
elif app_mode == "Classify Email":
    classify_email()